components 폴더 생성
Home.js 생성
homeContainer 스타일
div
h1
button
p
App.js Home import
container 스타일
Home 렌더링
styles 폴더
styledComponents.js 생성
Home.js 로 styledComponents에서 생성한 Button, Title 가져오기
Game.js 생성
gameContaeinr 스타일
App.js 사용자가 시작했는지 여부를 나타태는 상태 this.state
App.js Game import
삼항연산자로 Home 인지 Game 인지 판별
이 컴포넌트의 상태 begin을 바꿀 수 있는 메소드 goTest, goFirst setState
Home 에 onclick goTest
Home.js Button에 onClick={this.props.goTest}
components 폴더 안에 game 폴더 생성 안에 Question.js, Result.js 생성
Game.js 에 총 질문 수 const NUMBER_OF_QUESTION
Game.js 에 대답을 들은 질문 수인 this.state count
삼항연산자로 count가 NUMBER_OF_QUESTION 과 같다면 Result 아니면 Question
질문 하나 대답하면 넘어가기 (count 증가) selectAnswer setState
Question.js 에 Button, Title 가져오기
h3 {this.props.count + 1}
h2 질문
Button onClick = {this.props.selectAnswer}1번 대답
Button onClick = {this.props.selectAnswer}2번 대답
questionContent (질문 배열) question.js 에 import
{questionContent[this.props.count].question}
Game.js 에 constructor 에 e,s,t,j 점수 누산식
selectAnswer 에 btnNum(1번 누르면 +, 2번 누르면 -), type 추가 (e,s,t,j)
if(btnNum == 1){
      if(type == 'e'){ this.setState({ e: this.state.e + 1, count: this.state.count + 1 }) }
      if(type == 's'){ this.setState({ s: this.state.e + 1, count: this.state.count + 1 }) }
      if(type == 't'){ this.setState({ t: this.state.e + 1, count: this.state.count + 1 }) }
      if(type == 'j'){ this.setState({ j: this.state.e + 1, count: this.state.count + 1 }) }
    }else {
      if(type == 'e'){ this.setState({ e: this.state.e - 1, count: this.state.count + 1 }) }
      if(type == 's'){ this.setState({ s: this.state.e - 1, count: this.state.count + 1 }) }
      if(type == 't'){ this.setState({ t: this.state.e - 1, count: this.state.count + 1 }) }
      if(type == 'j'){ this.setState({ j: this.state.e - 1, count: this.state.count + 1 }) }
    }
Question.js onClick 수정 (인자전달)
<Button onClick={() => this.props.selectAnswer(1, questionContent[this.props.count].type)}>  
Game.js Result 에다 e,s,t,j 를 넘겨주기 위해 구조분해
const { e, s, t, j} = this.state
<Result points={{ e, s, t, j }} />
Result.js 에 this.state = {result : ""} (성향 파악 후 알려주기 위한 상태값)
넘어온 속성들을 가지고 성향 결론짓기!
  componentDidMount(){
    const { e, s, t, j } = this.props.points
    let result = "" // 계산 결과 누산할 임시 변수
    result += e > 0 ? "E" : "I"
    result += e > 0 ? "S" : "N"
    result += e > 0 ? "T" : "F"
    result += e > 0 ? "J" : "P"
    this.setState({ result: result })
  }
Result.js 결과화면 꾸미기
App.js 에 있는 goFirst (첫화면 돌아가기) 적용
Game.js 에 Result goFirst={this.props.goFirst}
Result.js Button onClick={this.props.goFirst}
Result.js import { resultContent } from '../../utils/resultContent'
this.state 에 content 추가
componentDidMount에
let content;
    resultContent.forEach(rc => {
      if(rc.type == result){
        content = rc;
      }
    })
this.setState에 content: content 추가
render 안에 const { content } = this.state // 콘텐츠만 뽑는 구조분해!